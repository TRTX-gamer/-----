C51 COMPILER V9.60.0.0   WIEGAND                                                           06/27/2022 02:00:52 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE WIEGAND
OBJECT MODULE PLACED IN .\Objects\wiegand.obj
COMPILER INVOKED BY: S:\Keil_v5\C51\BIN\C51.EXE Drivers\Src\wiegand.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Core\Inc;.\Drive
                    -rs\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\wiegand.lst) TABS(2) OBJECT(.\Objects\wiegand.obj)

line level    source

   1          /******************************************************************************
   2           *实现对韦根卡的识别
   3           ******************************************************************************/
   4          #include "wiegand.h"
   5          
   6          static uchar debug1[] = "00";
   7          
   8          /******************************************************************************
   9           *函数名称：initial(void)
  10           *函数功能：中断初始化
  11           *入口函数：无
  12           *出口函数：无
  13           ******************************************************************************/
  14          void initial(void)
  15          {
  16   1        IT0 = 1; // Wiegand-Data0        低电平触发中断
  17   1        EX0 = 1; //外部中断0允许
  18   1        IT1 = 1; // Wiegand-Data1 低电平触发中断
  19   1        EX1 = 1; //外部中断1允许
  20   1        EA = 1;  //开CPU中断
  21   1      }
  22          
  23          /******************************************************************************
  24           *函数名称：udelay(uint num)
  25           *函数功能：延时函数 延时num  us
  26           *入口函数：num
  27           *出口函数：无
  28           ******************************************************************************/
  29          void udelay(uint num) // 假如用51用12m晶振
  30          {
  31   1        while (--num)
  32   1          ;
  33   1      }
  34          
  35          /******************************************************************************
  36           *函数名称：Wiegand_Data0( )
  37           *函数功能：韦根卡数据0中断处理
  38           *入口函数：无
  39           *出口函数：无
  40           ******************************************************************************/
  41          void Wiegand_Data0() interrupt 0 using 1 //中断0处理函数,使用第一组寄存器，main函数使用
             -0组寄存器，写好寄存器组可以省去寄存器入栈，提高速度
  42          {
  43   1        EX0 = 0; //关中断0
  44   1        udelay(50);
  45   1        // if (DATA0 == 0) //如果INT0为低，标示0线中断
  46   1        // {
  47   1          rf_card->wiegand[rf_card->global_var] = '0'; //往数组里填0
  48   1          rf_card->global_var = rf_card->global_var + 1;
  49   1          if (rf_card->global_var >= 26)
  50   1          {
  51   2            rf_card->state = 1;
  52   2          }
  53   1        // }
C51 COMPILER V9.60.0.0   WIEGAND                                                           06/27/2022 02:00:52 PAGE 2   

  54   1        LcdPrintf(debug1);
  55   1        debug1[0]++;
  56   1        debug1[2] = rf_card->global_var / 10 + 48;
  57   1        udelay(100); //延时500uS（去掉中断后的处理时间）
  58   1        EX0 = 1;   //开中断0
  59   1      }
  60          
  61          /******************************************************************************
  62           *函数名称：Wiegand_Data1( )
  63           *函数功能：韦根卡数据1中断处理
  64           *入口函数：无
  65           *出口函数：无
  66           ******************************************************************************/
  67          void Wiegand_Data1() interrupt 2 using 2 //中断1处理函数,使用第二组寄存器
  68          {
  69   1        EX1 = 0; //关中断1
  70   1        udelay(50);
  71   1        // if (DATA1 == 0)
  72   1        // {
  73   1          rf_card->wiegand[rf_card->global_var] = '1';
  74   1          rf_card->global_var = rf_card->global_var + 1;
  75   1          if (rf_card->global_var >= 26)
  76   1          {
  77   2            rf_card->state = 1;
  78   2          }
  79   1        // }
  80   1        LcdPrintf(debug1);
  81   1        debug1[1]++;
  82   1        debug1[3] = rf_card->global_var % 10 + 48;
  83   1        udelay(100);
  84   1        EX1 = 1; //开中断0
  85   1      }
  86          
  87          // 2022年6月26号11点35分


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    287    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
